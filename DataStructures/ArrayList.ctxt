#BlueJ class context
comment0.target=ArrayList
comment0.text=\n\ This\ class\ is\ about\ removing\ objects\ and\ creating\ an\ arraylist\ to\ store\ the\ \n\ objects\ in\n\ \n\ This\ class\ has\ methods\ to\ check\ if\ the\ spots\ in\ the\ ArrayList\ are\ \n\ either\ empty\ or\ full.\n\ It\ has\ methods\ to\ find\ what\ object\ you\ looking\ for.\n\ You\ can\ find\ it\ by\ the\ indec\ and\ you\ can\ get\ the\ index\n\ of\ the\ object.\n\n\n\ @author\ Iakjot\ Kaur\n\ @version\ April\ 18th,\ 2020\n
comment1.params=obj\ index
comment1.target=void\ insert(java.lang.Object,\ int)
comment1.text=\n\ This\ method\ is\ to\ add\ the\ object\ at\ the\ specified\ index\ while\ \n\ shifting\ other\ elements\ over\ as\ needed.\n\ \n\ When\ the\ indec\ is\ less\ than\ zero,\ an\ error\ is\ there\n\ When\ the\ object\ is\ not\ there\ then\ there\ is\ an\ error\n\ When\ the\ index\ is\ greater\ than\ the\ array\ length\ then\n\ it\ gets\ stored\ with\ a\ new\ size.\n\ If\ the\ array\ has\ nothing\ in\ it,\ then\ the\ object\ gets\ added\n\ and\ the\ element\ gets\ updated.\n\n\ @param\:\ object,\ int\n\ *return\:\ none\n
comment2.params=
comment2.target=java.lang.Object[]\ resize()
comment2.text=\n\ The\ method\ is\ to\ resize\ the\ object\ array.\n\ \n\ First\ made\ a\ new\ resized\ array\ with\ the\ same\ number\ of\ elements\n\ then\ i\ looped\ through\ the\ copied\ over\ the\ elements\ \n\ then\ i\ returned\ the\ new\ resized\ array\n\n\ @param\:\ none\n\ *return\:\ Object[]\n
comment3.params=index
comment3.target=java.lang.Object\ remove(int)
comment3.text=\n\ This\ method\ is\ to\ remove\ the\ object\ from\ the\ array.\n\ \n\ When\ the\ index\ is\ less\ than\ zero,\ then\ there\ is\ an\ error.\n\ When\ there\ is\ space\ available\ at\ that\ index\ then\ there\ is\ an\ error.\n\ Created\ a\ temp\ object\ to\ store\ the\ information\ \n\ then\ looped\ through\ and\ expanded\ the\ index\n\ If\ the\ array\ has\ nothing\ in\ it\ then\ I\ subtracted\ the\ element\ count.\n\ Then\ I\ returned\ the\ temp\ array.\n\n\ @param\:\ int\n\ *return\:\ Object\n
comment4.params=
comment4.target=int\ size()
comment4.text=\n\ This\ method\ is\ to\ get\ the\ size\ of\ the\ array.\n\ \n\ I\ returned\ the\ length\ of\ the\ array.\n\n\ @param\:\ none\n\ *return\:\ int\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\n\ This\ method\ is\ to\ print\ out\ the\ objects\ with\ commas.\n\ \n\ Started\ off\ with\ the\ temp\ string\ and\ then\ looped\ through\ the\ array.\n\ When\ the\ spot\ in\ the\ array\ is\ not\ taken,\ I\ add\ it\ to\ the\ list\n\ and\ then\ I\ return\ it.\n\n\ @param\:\ none\n\ *return\:\ String\n
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\n\ This\ method\ is\ to\ check\ if\ the\ array\ is\ empty.\n\ \n\ Started\ with\ 2\ counters,\ one\ for\ true\ count\ the\ other\ for\ false.\n\ looped\ through\ the\ array\ and\ if\ the\ spot\ is\ available\n\ then\ I\ incremented\ the\ true\ count(c),\ if\ its\ not\ available,\ then\n\ I\ incremented\ the\ false\ count\ (count).\n\ Then\ I\ made\ sure\ the\ counts\ were\ more\ than\ zero.\n\n\ @param\:\ none\n\ *return\:\ boolean\n
comment7.params=ob
comment7.target=int\ indexOf(java.lang.Object)
comment7.text=\n\ This\ method\ is\ to\ find\ the\ index\ of\ the\ object.\n\ \n\ I\ started\ with\ creating\ a\ variable\ to\ keep\ track.\n\ Then\ I\ looped\ through\ the\ array\ to\ find\ where\ the\ inputted\ \n\ object\ is\ located\ and\ if\ found,\ I\ stored\ it\ in\ the\ tracker.\n\ If\ not\ found\ then\ I\ returned\ -1.\n\n\ @param\:\ Object\n\ *return\:\ int\n
comment8.params=other
comment8.target=boolean\ equals(java.lang.Object)
comment8.text=\n\ This\ method\ is\ to\ check\ if\ the\ objects\ are\ equal\ to\ each\ other.\n\ \n\ I\ made\ sure\ the\ object\ was\ an\ instance\ of\ the\ class\ and\ if\ that\ was\ true,\n\ I\ made\ an\ object\ of\ the\ class\ and\ used\ that\ to\ compare\n\ the\ sizes\ of\ the\ objects\ and\ looped\ through\ to\ see\ if\ \n\ the\ elements\ match.\ If\ they\ don't\ then\ I\ returned\ false.\n\n\ @param\:\ Object\n\ *return\:\ boolean\n
comment9.params=index
comment9.target=java.lang.Object\ get(int)
comment9.text=\n\ This\ method\ is\ to\ get\ the\ index\ of\ the\ object.\n\ \n\ If\ the\ array\ index\ is\ there\ and\ less\ than\ the\ elements\ then\n\ I\ return\ the\ index\ but\ if\ its\ not\ then\ it\ is\ out\ of\n\ bounds.\n\n\ @param\:\ int\n\ *return\:\ Object[]\n
numComments=10
