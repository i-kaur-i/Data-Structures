#BlueJ class context
comment0.target=Stack
comment0.text=\n\ This\ class\ is\ about\ using\ different\ operations\ to\ add\n\ and\ remove\ elements\ from\ a\ stack.\ \n\ \n\ It\ has\ push\ which\ is\ adding\ the\ element\ \n\ at\ the\ top\ of\ the\ stack.\ Pop\ is\ is\ removing\ the\ top\ of\ the\ element\n\ in\ the\ stack.\ This\ class\ also\ has\ methods\ to\ check\n\ if\ the\ stack\ is\ equal\ to\ the\ instance\ and\ to\ check\n\ if\ the\ stack\ is\ empty\ or\ not.\n\n\ @author\ Iakjot\ Kaur\n\ @version\ April\ 18th,\ 2020\n
comment1.params=obj
comment1.target=void\ push(java.lang.Object)
comment1.text=\n\ This\ method\ is\ to\ push\ the\ element\ to\ the\ top\ of\ the\ stack.\n\ \n\ \ I\ made\ sure\ the\ object\ passed\ in\ wasn't\ null\ and\ the\ element\n\ \ of\ it\ was\ less\ than\ the\ stack\ length\ and\ then\ added\ the\ element\ \n\ \ into\ the\ stack\ and\ made\ it\ the\ object.\ Then\ I\ incremented\ the\n\ \ elements.If\ the\ elements\ were\ bigger\ than\ I\ resized\ and\ stored.\n\n\ @param\:\ Object\n\ *return\:\ none\n
comment2.params=
comment2.target=java.lang.Object[]\ resize()
comment2.text=\n\ The\ method\ is\ to\ resize\ the\ object\ array.\n\ \n\ First\ made\ a\ new\ resized\ array\ with\ the\ same\ number\ of\ elements\n\ then\ i\ looped\ through\ the\ copied\ over\ the\ elements\ \n\ then\ i\ returned\ the\ new\ resized\ array\n\n\ @param\:\ none\n\ *return\:\ Object[]\n
comment3.params=
comment3.target=java.lang.Object\ pop()
comment3.text=\n\ This\ method\ is\ to\ remove\ the\ element\ on\ top\ of\ the\ stack.\n\ \n\ the\ object\ variable\ called\ data\ is\ created\ and\ subtracted\ the\ element\n\ and\ then\ stored\ the\ element\ in\ the\ stack\ in\ the\ variable\ I\ made\n\ and\ then\ returned\ the\ variable.\n\n\ @param\:\ none\n\ *return\:\ Object\n
comment4.params=
comment4.target=void\ show()
comment4.text=\n\ This\ method\ is\ to\ show\ the\ what\ I\ have\ in\ the\ stack\ currently.\n\ \n\ used\ a\ for\ each\ loop\ and\ printed\ out\ the\ elements\ in\ the\ stack\n\n\ @param\:\ none\n\ *return\:\ none\n
comment5.params=
comment5.target=int\ size()
comment5.text=\n\ to\ get\ the\ size\ of\ the\ current\ stack.\n\ \n\ returned\ the\ number\ of\ elements\ in\ the\ stack\ to\ get\ the\ size\n\ of\ it.\n\n\ @param\:\ none\n\ *return\:\ int\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\n\ This\ method\ is\ to\ print\ out\ the\ elements\ with\ commas.\n\ \n\ Started\ with\ a\ temp\ with\ an\ empty\ string\n\ and\ then\ I\ looped\ through\ and\ stored\ the\ stack\ with\n\ commas.\n\n\ @param\:\ none\n\ *return\:\ String\n
comment7.params=
comment7.target=boolean\ isEmpty()
comment7.text=\n\ This\ method\ is\ to\ check\ if\ the\ stack\ is\ empty.\n\ \n\ Started\ with\ a\ temp\ with\ an\ empty\ string\n\ and\ then\ I\ looped\ through\ and\ stored\ the\ stack\ with\n\ commas.\n\n\ @param\:\ none\n\ *return\:\ boolean\n
comment8.params=object
comment8.target=boolean\ equals(java.lang.Object)
comment8.text=\n\ This\ method\ is\ to\ check\ if\ the\ object\ is\ equal\ to\ the\ other.\n\ \n\ First\ I\ checked\ if\ the\ object\ is\ an\ instance\ of\ the\ class.\n\ Then\ I\ made\ an\ object\ of\ the\ stack\ and\ compared\ the\ size\ \n\ of\ the\ instance\ and\ the\ object.\ Then\ I\ compared\ the\ elements\n\ in\ the\ for\ loop.\n\ \n\n\ @param\:\ Object\n\ *return\:\ boolean\n
numComments=9
